@ngdoc overview
@name Plugin validation
@sortOrder 150
@description

# Plugin Validation <a id="top"></a>
<a href="mailto:documentation@lithium.com?Subject=Developer Documentation Feedback" target="_top">Send feedback about this document</a>

Plugin validation occurs when you run any of the following commands from the root
of your plugin repository:

* `li package-plugin` performs client side validation, but does not upload the plugin to the stage server
* `li submit-plugin --dryrun` performs client-side validation, uploads the plugin to the server, runs
server-side validation, but does not save the plugin to the stage server after validation completes
* `li submit-plugin` performs client-side validation, uploads the plugin, runs server-side validation,
 and saves the plugin to the stage server

Validation of file contents (XML validation, FreeMarker validation, skin properties) occurs
server-side. Client-side validation includes the plugin directory
structure, directory names, and file names.

If you upload a plugin point file using the SDK that has the same name as a file that
has already been created using Studio, a message appears warning you that the file exists in
the Studio plugin, and that the version in the Studio plugin will take precedence over
the file added via the SDK.

You can force the SDK plugin upload to fail when files in the SDK plugin also exist in the Studio
plugin. To force this behavior, set `allowStudioOverrides` in `server.conf.json` to `false`.

* [Asset validation](/refer/pluginvalidation#asset)
* [Component validation](/refer/pluginvalidation#component)
* [Layout validation](/refer/pluginvalidation#layout)
* [Quilt validation](/refer/pluginvalidation#quilt)
* [Skin validation](/refer/pluginvalidation#skin)
* [Text validation](/refer/pluginvalidation#text)
* [Endpoint validation](/refer/pluginvalidation#endpoint)
* [Controller validation](/refer/pluginvalidation#controller)
* [Macro validation](/refer/pluginvalidation#macro)
* [Other validation requirements](/refer/pluginvalidation#other)
* [Validation errors](/refer/pluginvalidation#otherErrors)


## Asset validation <a id="asset"></a>
For files in `web/html`, validation ensures that:

* `web/html/assets` can have subdirectories, but only five levels deep
* Files in `web/html/badge_icons` have only these files extensions: `.png`, `.gif`, `.jpeg`, `.jpg`, `.svg`
* Files in `web/html/rank_icons` have only these files extensions: `.png`, `.gif`, `.jpeg`, `.jpg`, `.svg`

[Back to top](/refer/pluginvalidation#top)

## Component validation <a id="component"></a>
For files in `res/components`, validation ensures that:
* Files use the `.ftl` extension
* Files use valid FreeMarker syntax

**Note:** If `strictMode` is set to `true` in `server.conf.json` in `PLUGIN_REPO/<plugin_name`>,
FreeMarker syntax errors will block the plugin from being uploaded to the stage server. If `strictMode`
is set to `false`, the plugin will be uploaded to stage despite the FreeMarker errors.

[Back to top](/refer/pluginvalidation#top)

## Layout validation <a id="layout"></a>
For files in `res/layouts`, validation ensures that:
* The layout uses the `.layout.xml` file extension
* The layout file is not empty
* The file contains valid layout XML

[Back to top](/refer/pluginvalidation#top)

## Quilt validation <a id="quilt"></a>
For files in `res/quilts`, validation ensures that:
* The quilt uses the `.quilt.xml` file extension
* The quilt references a single layout and that layout exists
* The file uses valid XML
* `res/quilts` contains only one subdirectory, `custom`

[Back to top](/refer/pluginvalidation#top)

## Skin validation <a id="skin"></a>
For files in `res/skins`, validation ensures that:
* Files in `res/skins/<skin_id>/images` have extensions `.png`, `.gif`, `.jpeg`, `.jpg` or `.svg`
* Files in `res/skins/<skin_id>/images` do not use dashes (-) in their names. Underscores (_) are permitted
* Files in `res/skins/<skin_id>/css` are named `skin.css`
* Files in `res/skins/<skin_id>/components` have one of the following names:
  * content_wrapper.ftl
  * head.ftl
  * head_top.ftl
  * hitbox.ftl
* CSS and SCSS files ending in `.ftl` compile through FreeMarker - valid FreeMarker is required
unless `strictMode` is set to false in `server.conf.json`.
* A `skin.properties` file exists and has the `parent` and `title` fields defined
* The parent skin defined in `skin.properties` exists

[Back to top](/refer/pluginvalidation#top)

## Text validation <a id="text"></a>
For files in `res/lang`, validation ensures that:
* The text properties file name uses only supported language codes. See <a href="https://community.lithium.com/t5/Community-display/Languages-that-Lithium-supports/ta-p/6566" target="_blank">Languages that Lithium supports</a>.
* The text properties file uses the correct file name: text.__language_code__.properties (examples: text.en.properties, text.de.properties)
* Subdirectories under `res/lang` exist only for supported languages

[Back to top](/refer/pluginvalidation#top)

## Endpoint validation <a id="endpoint"></a>
For files in `res/endpoints`, validation ensures that:
* Files use the `.endpoint.xml` extension
* Files use valid XML syntax
* There is an associated FTL file with the same name as the endpoint in `res/controllers`
* Endpoint names can contain letters (a-z), numerals (1-9), hyphen (-), underscore ( _ ), and dot (.). An endpoint name cannot begin with '.'

[Back to top](/refer/pluginvalidation#top)

## Controller validation<a id="controller"></a>
For files in `res/controllers`, validation ensures that:
* Files use the `.ftl` extension
* Files use valid FreeMarker syntax

[Back to top](/refer/pluginvalidation#top)

## Macro validation<a id="macro"></a>
For files in `res/macros`, validation ensures that:
* Files use the `.ftl` extension
* Files use valid FreeMarker syntax
* Macro names can contain letters (a-z), numerals (1-9), hyphen (-), underscore ( _ ), and dot (.). A macro name cannot begin with '.'

**Note:** Although the macro FTL file you add to the plugin can have a hypen in the name, FreeMarker does not supprt
hyphens in the macro variable name. When creating your macro FreeMarker, be sure to follow
the variable naming conventions defined by
<a href="http://freemarker.org/docs/dgui_template_exp.html#dgui_template_exp_var_toplevel" target="_blank">FreeMarker.org</a>.

[Back to top](/refer/pluginvalidation#top)

## Other plugin validation requirements<a id="other"></a>
Here are a few more validation requirements when you run the `li` scripts:

* The plugin cannot be empty when you submit it. If you submit an empty plugin directory, you will see errors like
"Rule file or plugin directory can't be null" or "Plugin has too few files".

* When using the `pluginPoints` setting in `server.conf.json` or the `--points` flag when
exporting or clearing plugin points from the Studio plugin, files for the plugin points
specified must exist in the Studio plugin. Otherwise you will receive an error. For example, if you pass
`-- points 'macro'` to `li export-studio-plugin` but there are no macros in Studio, you will
recieve a PLUGIN_POINT_DOWNLOAD_FAILURE error.

[Back to top](/refer/pluginvalidation#top)

## Validation errors <a id="otherErrors"></a>

**A file in the plugin has a possible issue:**

If you encounter an error like this, review the
code in the file named in the error message. This error is a soft failure and indicates there
are potential problems with the file. In some cases, the code might be valid and the warning might not apply.
For example, FreeMarker code that accesses and processes request parameters could trigger this error.

**Not a valid text group**

This error indicates you are adding or customizing a text string that is not allowed via the SDK. Try adding the text
string in Studio instead.

**Other errors**

If you encounter any of these error messages, contact Lithium Support for details:

* Error creating document builder
* Error parsing rule file

[Back to top](/refer/pluginvalidation#top)
