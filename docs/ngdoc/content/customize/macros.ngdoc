@ngdoc overview
@name Macros
@sortOrder 700
@description


<h1 class = "title">Macros <a id="top"></a></h1>

A macro is an easy way to write code once and then reuse in components and endpoints when needed. Macros can be used
both in components and endpoints, so if you need to share code between the two, place the code in a macro file.

Macros use the extension `.ftl`. Place them in `/res/macros`. Call them as needed from
components and endpoints using FreeMarker's `include` statement:

```
<#include "recurse_reponse.ftl" />
```

Macro names can contain letters (a-z), numerals (1-9), hyphen (-), underscore ( _ ), and dot (.). A macro name cannot begin with '.'

> **Note:** Although the macro FTL file you add to the plugin can have a hypen in the name, FreeMarker does not support hyphens in the macro variable name. When writing your macro, be sure to follow the variable naming conventions defined by <a href="http://freemarker.org/docs/dgui_template_exp.html#dgui_template_exp_var_toplevel" target="_blank">FreeMarker.org</a>.

This example macro "recurse_response" recursively outputs the contents of a response. Recurse_response calls to a separate macro to include a user avatar in the response
if the node name is "author."

```
<#macro recurse_response node>
	<#if node?node_type == "element">
		<${node?node_name}<#list node.@@ as attr>${attr?node_name}="${attr}"</#list><#if !hasChildren(node)>/</#if>>
		<#list node?children as c>
			<@recurse_response node=c />
		</#list>
		<#if node?node_name == "author">
			<@insertUserAvatar user=node />
		</#if>
		<#if hasChildren(node)></${node?node_name}></#if>
	<#elseif node?node_type == "text">
		${node}
	</#if>
</#macro>
```

[Top](/customize/macros#top)
___
