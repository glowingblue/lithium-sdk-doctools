@ngdoc overview
@name Customize
@sortOrder 300
@description

# Customize <a id="top"></a>
<a href="mailto:documentation@lithium.com?Subject=Developer Documentation Feedback" target="_top">Send feedback about this document</a>

Now that you have {@link develop/create created} your local SDK plugin repository,
let's talk about plugin points and how to contribute customizations with the SDK.

* [Where to put your custom assets](/develop/customize#whereToPut)
* [Customize plugin points](/develop/customize#tutorials)

Be sure that you have read the Understand Plugins section in {@link learn/architecture Customization Framework}, as well as
<a href="https://community.lithium.com/t5/Understanding-Studio/About-Studio/ta-p/60320" target="_blank">About Studio</a> and <a href="https://community.lithium.com/t5/Understanding-Studio/More-about-plugins/ta-p/194316" target="_blank">More About Plugins</a>
before you begin. Remember that SDK contributions are visible in Studio . Assets with
versions existing in SDK are indicated in Studio with a special icon.

<img src="img/sdkVsStudioAssetsInTab.png" width="600">

## Where to put your custom assets <a id="whereToPut"></a>

Let's look at where to place different plugin assets. When you created your plugin project,
the script created several folders in your local
plugin repository. All customizations go in the `res` and `web` directories.


| Plugin Point | Location | Files Extension | Notes |
| ------- | ----------- | ---------- | ---------------- |
| components | `res/components` | .ftl | Components placed here appear in the **Studio > Components** tab. They are identified with a special SDK icon. Component names are case-sensitive. |
| endpoint metadata  | `res/endpoint` | .endpoint.xml| Endpoint metadata definition files do not appear in Studio. The name is case-sensitive and must match the associated controller FTL file. |
| endpoint controllers | `res/controllers` | .ftl | Controllers appear in **Studio > Endpoints**. They are identified with a special SDK icon. Controller names are case-sensitive and must match the associated endpoint XML file. |
| page initialization <br /> (common.init) | `res/init` | .ftl | Content from this file appears in **Studio > Advanced > Page Intialization**. Page initialization scripts contributed with the SDK _are not_ indicated by the SDK icon. |
| text properties | `res/lang` | .properties | Text strings contributed with the SDK _are not_ indicated by the SDK icon in the **Studio > Text Editor** tab. |
| layouts | `res/layouts` | .layout.xml | Layouts appear in **Studio > Layouts**. They are identified with a special SDK icon. Layout names are case-sensitive. |
| macros | `res/macros` | .ftl | Marcos appear in the **Macros** section of **Studio > Endpoints**. They are identified with a special SDK icon. Macro names are case-sensitive. |
| quilts | `res/quilts/custom` | .quilt.xml | Quilts files appear in the Custom section in the page selection modal **Studio > Page**. They are identified in Studio with a special SDK icon.  |
| skins | `res/skins` | See [Skins](/develop/customize#skins) | Skin assets include CSS, SCSS, skin properties, and wrapper content. Custom skin files appear in **Studio > Community Style**. They are identified in Studio with a special SDK icon. |
| assets | `web/html/assets` | various | Asset files appear in **Studio > Community Style > Other Assets** in the Asset Library. They are identified in Studio with a special SDK icon. |
| badge icons | `web/html/badge_icons` | various | Badge icons  appear in the **Studio > Community Style > Badges** tab in the Asset Library. They are identified in Studio with a special SDK icon. |
| rank icons | `web/html/rank_icons` | various | Rank icons appear in the **Studio > Community Style > Rank Icons** tab in the Asset Library. They are identified in Studio with a special SDK icon. |

## Customizing plugin points <a id="tutorials"></a>
The sections below provide instructions and examples for plugin point customizations.
See our {@link develop/tutorial Tutorial} and {@link refer/pluginvalidation Plugin Validation} documentation for additional customization details.

* [Customize components](/develop/customize#components)
* [Customize quilts](/develop/customize#quilts)
* [Customize layouts](/develop/customize#layouts)
* [Customize skins](/develop/customize#skins)
* [Customize styles](/develop/customize#stylesheets)
* [Customize text](/develop/customize#text)
* [Add images, icons, and other assets](/develop/customize#assets)
* [Create macros](/develop/customize#macros)
* [Create endpoints and controllers](/develop/customize#endpoints)
* [Customize the page initialization script](/develop/customize#pageInit)

All instructions assume you're working in your plugin repository (PLUGIN_REPO).

**Note:** Remember that any customizations that exist in Studio that have the same
name and file extension as a customization you submit using the SDK override the SDK
version.

[Back to top](/develop/customize#top)

### Customize components<a id="components"></a>
You write components in FreeMarker, a templating language. You can learn about FreeMarker at <a href="http://freemarker.org/" target="_blank">FreeMarker.org</a>.
Lithium provides our own FreeMarker context objects and directives that work
specifically with the Lithium Community product. To learn more, select **UI Customization > FreeMarker** from the
Developer Documentation Portal menu.

Here is some sample FreeMarker code that prints out details about the node (the community,
category, or board) in context using the coreNode FreeMarker context object. We use
this code in our customization tutorial.

```
Node Details</br>
${coreNode.id}</br>
${coreNode.nodeId}</br>
${coreNode.nodeType}</br>
${coreNode.shortTitle}</br>
${coreNode.title}
```

If you're new to FreeMarker and Lithium Communities, see these articles on the Lithium Community to get started with custom components:
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Component-tutorial-Building-your-first-custom-component-with/ta-p/122991" target="_blank">Component Tutorial: Building your first custom component</a>
* <a href="https://community.lithium.com/t5/Community-API-v2/Tutorial-Update-a-FreeMarker-component-from-Community-REST-API/ta-p/178887" target="_blank">Component Tutorial: Update a component from Community API v1 to v2</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Adding-JavaScript-to-components-with-liaAddScript/ta-p/197594" target="_blank">Adding JavaScript to components</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Component-Caching-with-liaMarkupCache/ta-p/200921" target="_blank">Component Caching</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Calling-an-endpoint-from-a-custom-component/ta-p/197595" target="_blank">Calling an Endpoint from a Component</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Passing-Parameters-to-a-Custom-Component/ta-p/88704" target="_blank">Passing parameters to a Component</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Creating-Modal-Dialogs/ta-p/77986" target="_blank">Creating Modal Dialogs</a>

[Back to top](/develop/customize#top)

<hr/>
### Customize quilts <a id="quilts"></a>
Lithium comes with a set of default pages like the View Profile Page and the Forum Page. A page is a
combination of a quilt and layout. In our Studio documentation, you will see the terms _quilt_ and _page_
used interchangeably, but under the covers, the building blocks of a page (the quilt and the layout) are two separate
pieces of code.

We'll talk about layouts in a [later section](/develop/customize#layouts). First, we'll concentrate on quilts, which are
customized more frequently. For now, understand that your custom quilts must always reference a layout to use. For example `<quilt layout="two-column.main-side" nestable="false">`.

You can define a quilt to be "nestable", meaning that the quilt can be included in another quilt. This
is common with headers and footers. When you include a nested quilt, you can choose to add components to
the nested quilt or remove components from the nested quilt. For example, your Header quilt might have two or three components
that you want to use on every page. On your landing page, however, suppose you want the header to include a Jumbotron (or Hero)
component. You can use a special element in your landing page quilt XML to add the Jumbotron component to the header
when the header is nested in the landing page.

Quilts use the file extension `quilt.xml`. Place them in `/res/quilts`.

#### The quilt XML

Here is a simple quilt - MyCustomPage.quilt.xml. It
adds the coreNodeDetails component in the `side-content` section.

```xml
<quilt layout="two-column.main-side" nestable="false">
  <add to="common-footer">
    <component id="quilt:Footer"/>
  </add>
  <add to="side-content">
    <component id="coreNodeDetails"/>
    <component id="community.widget.admin-links"/>
    <component id="common.widget.announcement"/>
    <component id="forums.widget.users-online"/>
    <component id="community.widget.quick-links"/>
  </add>
  <add to="main-content">
    <component id="qanda.widget.ask-an-expert" discussionStyle="forum"/>
    <component id="forums.widget.recent-threads"/>
    <component id="forums.widget.recent-messages"/>
  </add>
  <add to="common-header">
    <component id="quilt:Header"/>
  </add>
  <remove from="breadcrumb" for="Header">
    <component id="common.widget.breadcrumb"/>
  </remove>
</quilt>
```
The rendered quilt looks like this:

<img src="img/sdkQuiltTutorialComponents.png" width="700 px"/>

Here are the elements used in quilts.

| Element | Description | Attributes | Child Attributes |
| ------- | ----------- | ---------- | ---------------- |
| quilt   | The main container. Defines the layout and whether the quilt can be nested within other quilts. Define components to add or remove from the quilt | `layout` - the name of the layout<br />`nestable` - whether or not the quilt can be included within another quilt |` add`, `remove` |
| add     | Defines a component to add to a column in the layout used by the quilt. You can add the component to a nested quilt within the current quilt using the `for` attribute. For example: `<add to="hero-content" for="Header"> <component id="quilt:CommunityHero"/>` adds the CommunityHero nested quilt into hero-content colulmn of the Header quilt | `to` - the column where the component will be added<br /> `for` - the ID of the nested quilt | `component` - the  ID of the component to add |
| remove  | Defines components to remove from a nested quilt included in the current quilt (for example, the header). In the example above, we are removing the `common.widget.breadcrumb` component from the `breadcrumb` column in the `Header` quilt when Header is included in MyCustomPage.quilt.xml | `from` - the column from which to remove the component. The value must match a valid column name in a valid layout. <br />`for` - the ID of the nested quilt | `component` - the ID of the component to remove |
| component | Defines a component being added or removed from the quilt | `id` - the component ID. The ID is the name of the component FTL file. <br />`mode` - used with core Lithium components only. Some Lithium components require the mode parameter to render the component property in a slim or wide content panel. The Lithium component hover cards in Studio detail which components use the mode parameter.<br />`interactionStyle` - used to scope a component to a particular interaction style. The Lithium component hover cards in Studio detail which components use the interactionStyle parameter.| . |

To add or rearrange components, simply add or move the reference to the component (such as `<component id=“coreNodeDetails”/>`)
from one section of the quilt XML to another.

You contribute quilts in one of two ways:
* [Create an entirely new quilt](/develop/customize#newQuilt)
* [Override one of our default quilts](/develop/customize#overrideQuilt)

#### Create a custom quilt <a id="newQuilt"></a>
Quilts go in `PLUGIN_REPO/res/quilts/custom` in your local plugin. Unique custom quilts use
the file name structure `<quilt_name>.quilt.xml`, for example MyCustomPage.quilt.xml.

See <a href="http://community.lithium.com/t5/Pages-and-layouts/Create-a-custom-page/ta-p/110639" target="_blank">this article</a>
in the Lithium Community for more information about creating custom pages.

[Back to top](/develop/customize#top)

#### Override a core quilt <a id="overrideQuilt"></a>
Custom quilts that override Lithium core quilts use the
file name structure <br />`<core_quilt_name>.<descriptive_identifier>.quilt.xml`, for example
BlogPage.custom.quilt.xml.

Here are simple instructions for overriding core Lithium quilts.
For more detailed information, read <a href="http://community.lithium.com/t5/Pages-and-layouts/Override-a-default-page/ta-p/108961)" target="_blank">this article</a>
on the Lithium Community.

To override a core Lithium quilt:

**1.** Go to **Studio > Page**.

**2.** Click **Choose** to select the quilt to override.

**3.** Click **XML**.

**4.** Copy the quilt XML.

**5.** In a text editor, paste the quilt XML and name your quilt file `<core_quilt_name>.<descriptive_identifier>.quilt.xml`.

**6.** Save your file to `PLUGIN_REPO/res/quilts/custom`.

**7.** Make your changes to the quilt (add, remove, move components, or change the page layout).

**8.** Run `li submit-plugin`.

**9.** Override the core community quilt in **Community Admin > Content > Custom Pages**.

[Back to top](/develop/customize#top)

<hr/>

### Customize layouts <a id="layouts"></a>

Layouts define the structure of a page using are rows and columns. Each quilt specifies a layout and the quilt defines which
components to place within each of the layout's columns. The layout contains any number of rows and each row contains
one or more columns. Each column has a width and an ID. The total width of the columns in a row must add up to 24. Lithium comes with a large set of layouts to choose from. You can find a list of default layouts in
**Studio > Layouts**.

Learn about layouts in <a href="http://community.lithium.com/t5/Pages-and-layouts/About-page-layouts/ta-p/108951" target="_blank">this article</a> in
the Lithium community.

Layouts use the file extension `layout.xml`. Put them in the `/res/layouts` directory in your plugin project.
#### The layout XML

```
<layout>
  <row id="header">
    <column id="common-header" width="24"/>
  </row>
  <row id="main">
    <column id="main-content" width="18"/>
    <column id="side-content" width="6"/>
  </row>
  <row id="footer">
    <column id="common-footer" width="24"/>
  </row>
</layout>
```

Here are the elements used in layouts.

<a href="http://community.lithium.com/t5/Pages-and-layouts/Create-a-custom-page-layout/ta-p/108959" target="_blank">This article</a> contains
useful examples for editing and creating the layout XML.

| Element | Description | Attributes | Child Attributes |
| ------- | ----------- | ---------- | ---------------- |
| layout  | The main container | NONE | `row` |
| row     | A row in the layout. | `id` - the ID of the row | `column` - columns in the row |
| column  | The column definition | `id` - the ID of the columns <br /> `width` - width of the column. The width of columns in a row must add up to 24. | . |


<hr/>

### Customize skins <a id="skins"></a>
**Note:** This section does not cover how to customize Lithium Responsive skins. If your
community is using Lithium Responsive, contact your Lithium Services
representative for details and documentation about Lithium Responsive skin customization.

This section includes:

* [Skin directory structure](/develop/customize#structure)
* [Basic styling with skin properties](/develop/customize#skinProperties)
* [Overriding skin images](/develop/customize#skinImages)
* [Customizing the page wrapper](/develop/customize#wrapper)

Using the SDK, you can contribute skin properties, CSS, and
wrappers for desktop and mobile v1 communities. Put skin customizations in `res/skins`.
 Each skin is a separate subdirectory under `res/skins`. Each skin folder needs
subdirectories to hold skin properties and wrappers for
 mobile and desktop as needed. We'll look at that subdirectory structure in the next section

#### Skin directory structure <a id="structure"></a>

**Tip:** The easiest way to create the skin structure for a new skin is to create the skin in Studio and then export skins to the SDK
using `li export-studio-plugin --points "skin" --force`.
When you export the skin from Studio into the SDK plugin, the skin structure is created for you automatically.

If you don't export a skin from Studio, create the following directories under `res/skins` where [skinid] is the name of
your new skin. Skin IDs can contain letters, numbers, and underscores:
* res/skins/[skinid]
* res/skins/[skinid]/css
* res/skins/[skinid]/desktop/components
* res/skins/[skinid]/desktop/css
* res/skins/[skinid]/desktop/images
* res/skins/[skinid]/mobile/components (optional if not using mobile v1)
* res/skins/[skinid]/mobile/css (optional if not using mobile v1)
* res/skins/[skinid]/mobile/images (optional if not using mobile v1)

Create new files called `skin.properties` under res/skins in the following locations:
* res/skins/[skinid]/skin.properties
* res/skins/[skinid]/desktop/skin.properties
* res/skins/[skinid]/mobile/skin.properties (optional unless overriding properties for mobile)

This file defines the parent skin for your new skin, as well as some basic styling.
```
parent              = [any existing skin in the SDK or Studio plugin]
title               = [skinid]
```

Your skin folder structure should look something like this:

<img src="img/skinDir.png" width="520" align="middle"/>

After you have submitted to stage, apply the skin to the community in **Community Admin > Display > Skins** to see the changes.

[Back to top](/develop/customize#top)

#### Basic skin styling with skin properties <a id="skinProperties"></a>
We described earlier that skin.properties defines some basic styles used by your skin.
You can read more about <a href="https://community.lithium.com/t5/Skins-and-assets/Edit-skin-properties/ta-p/40322" target="_blank">skin properties</a> on the Lithium Community.
See {@link refer/skinproperties Skin Properties} for additional skin
properties you can add to the file.

If you want to use different properties in the mobile and desktop versions of the skin, you would
 create additional `skin.properties` files within the `desktop` and `mobile` directories
 for the the `mycustomskin` directory, as shown in the image above.

#### Overriding skin images <a id="skinImages"></a>
To override an image used in a skin, create a new image asset and give it the same
name as the image currently used by the skin. Then place the image in PLUGIN_HOME/res/skins/[skinid]/images.

[Back to top](/develop/customize#top)

#### Customizing the page wrapper <a id="wrapper"></a>
The page wrapper for a skin provides an additional layer or styling above and below the main
content of the page (anything above and below `li-body` when looking at a the code for a community page.)

See <a href="https://community.lithium.com/t5/Skins-and-assets/Edit-the-page-wrapper/ta-p/109069" target="_blank">Edit the page wrapper</a> and
 <a href="http://community.lithium.com/t5/Developers-Knowledge-Base/Launch-Community-Wrapper-Guidelines/ta-p/6411" target ="_blank">Community Wrapper Guidelines</a>
  for more details about how the wrapper works in communities.

You can upload wrapper content to the stage server using the SDK. The wrapper contents you
 contribute using the SDK map to the content areas in **Studio > Community Style > Community
 Skins > Wrapper**.

When you customize the wrapper, edit `<skinid>/desktop/skin.properties` so that it
looks like this:

```
parent = [skinid]
title = [skinid]
```

Wrapper content is put into FTL (FreeMarker) files. Place the in
  `PLUGIN_HOME/res/skins/<skinid>/components/desktop` or `PLUGIN_HOME/res/skins/<skinid>/components/mobile`.
  Use theses file names for wrapper elements:
* head_top.ftl - Used to add browser compatibility tags. This maps to the **Page Head Top Content** section of the Studio **Wrapper** tab.
* head.ftl - HTML to add meta tags, links to external CSS or JavaScript files, styling,
 API keys, and so on to the `<head>` code on each page. This maps to the **Page Head Bottom Content** section of the Studio **Wrapper** tab.
* content_wrapper.ftl - HTML to add header and footer content above and below the `<@liaBody />` tag in a community page.
 This content maps to content you would could add to the **Page Header** and **Page Footer** sections of the Studio **Wrapper** tab.
* hitbox.ftl - for HTML content to add below the footer, such as Google Analytics or Omniture metrics collection,
or additional JavaScript. This maps to the **Hitbox** section of the Studio **Wrapper** tab.

##### Example head_top.ftl
```
<meta http-equiv="x-ua-compatible" content="IE=edge"/>
```
##### Example head.ftl
This example adds some styling and adds some navigation logic based on whether a user is
anonymous or not.
```
<link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,400,300,600,700&subset=cyrillic,cyrillic-ext,latin' rel='stylesheet' type='text/css'>
<link href="${asset.get("/html/assets/favicon.ico")}" rel="shortcut icon" />

<#if user.anonymous>
<style>
#lia-body .lia-content .lia-component-common-widget-user-navigation .lia-component-users-action-registration { display: none; }
#lia-body .lia-content .lia-component-common-widget-user-navigation li:first-child + li { display: none; }
</style>
</#if>
```

##### Example content_wrapper.ftl
 This retrieves header and footer content and inserts it into the page as it is rendered
 and displays custom content.
 ```
${settings.name.get("layout.urlfetcher_header")}
<@component id="common.widget.custom-content" name="1" panel="false"/>
<@liaBody />


${settings.name.get("layout.urlfetcher_footer")}
```

[Back to top](/develop/customize#top)

<hr/>
### Customize CSS <a id="stylesheets"></a>

Some visual elements aren't defined by skin properties,
but you might still want to style differently. This is where CSS comes in.

**Note:** Responsive skins use Sass SCSS. If your community is using Lithium Responsive, contact
your Lithium Services representative for customizing responsive skins using the SDK.

Place your CSS in a file called in  `skin.css` in `PLUGIN_REPO/res/skins/[skinid]/css`.
[Back to top](/develop/customize#top)

<hr/>
### Customize text properties <a id="text"></a>
Text used in your customizations go in a file called text._language_code_.properties where
_language_code_ represents a language, such as "en" for English or "de" for German.
Create a separate text properties file for each language used in your community.
Supported languages and the associated language code are described in
<a href="https://community.lithium.com/t5/Community-display/Languages-that-Lithium-supports/ta-p/6566" target="_blank">Languages that Lithium supports</a>.

Put your text properties files in `PLUGIN_REPO/res/lang`.

[Back to top](/develop/customize#top)

<hr/>
### Customize images, icons, and other assets <a id="assets"></a>
With the SDK, you can contribute images, badge and rank icons, and other assets to the Asset Library.
These assets might be image assets like
your community logo, but they could also be other files such as PDFs, CSS, and JavaScript.
The files here are often included in wrapper content, custom components, and endpoints.

* Custom assets go in `web/html/assets`
* Custom badge icons go in `web/html/badge_icons`
* Custom rank icons go in `web/html/rank_icons`.

**Note:** Image files should not include hyphens. Underscores are permitted.

[Back to top](/develop/customize#top)

<hr/>
### Create macros <a id="macros"></a>
A macro is an easy way to write code once and then reuse in components and endpoints when needed. Macros can be used
both in components and endpoints, so if you need to share code between the two, place the code in a macro file.

Macros use the extension `.ftl`. Place them in `/res/macros`. Call them as needed from
components and endpoints using FreeMarker's `include` statement:

```
<#include "recurse_reponse.ftl" />
```

Macro names can contain letters (a-z), numerals (1-9), hyphen (-), underscore ( _ ), and dot (.). A macro name cannot begin with '.'

**Note:** Although the macro FTL file you add to the plugin can have a hypen in the name, FreeMarker does not supprt hyphens in the macro variable name. When creating your macro FreeMarker, be sure to follow the variable naming conventions defined by <a href="http://freemarker.org/docs/dgui_template_exp.html#dgui_template_exp_var_toplevel" target="_blank">FreeMarker.org</a>.

This example macro "recurse_response" recursively outputs the contents of a response. Recurse_response calls to a separate macro to include a user avatar in the response
if the node name is "author."

```
<#macro recurse_response node>
	<#if node?node_type == "element">
		<${node?node_name}<#list node.@@ as attr>${attr?node_name}="${attr}"</#list><#if !hasChildren(node)>/</#if>>
		<#list node?children as c>
			<@recurse_response node=c />
		</#list>
		<#if node?node_name == "author">
			<@insertUserAvatar user=node />
		</#if>
		<#if hasChildren(node)></${node?node_name}></#if>
	<#elseif node?node_type == "text">
		${node}
	</#if>
</#macro>
```

[Back to top](/develop/customize#top)

<hr/>
### Create endpoints and controllers<a id="endpoints"></a>
While custom components blend into the look and feel of the community to extend the
functionality of a core component or provide an entirely new module, endpoints are independent
of the community. An endpoint can gather and manipulate data from a series of REST calls,
as well as have its own styling. You can use endpoints to:

* Make AJAX requests from custom components
* Syndicate community content on other websites
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Using-Endpoints-to-Condense-REST-API-Requests/ta-p/88908" target="_blank">Condense REST API requests</a>
* <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Using-the-http-client-Context-Object-to-Integrate-with-a-Third/ta-p/91640" target="_blank">Make server-to-server REST API calls</a>

Endpoints are written in FreeMarker. When contributing an endpoint using the SDK, each endpoint consists
of two files:

* an XML file defining metadata for the endpoint. Place this file in `/res/endpoints` and use the file extension `endpoint.xml`.
* an FTL controller file containing the endpoint FreeMarker code. Place this file in `/res/controllers` and use the file extension `.ftl`.

This is different than when you contribute an endpoint using Studio. When you create an endpoint in Studio,
you create the controller and Studio automatically creates the endpoint metadata XML file.

**Note:** The endpoint and controller file must use the same name.
**Tip:** To quickly create the endpoint XML, create the endpoint in Studio and export it the endpoint
into the SDK using `li export-studio-plugin --points "endpoint" --force`.

#### Endpoint XML example and parameters
This example defines the meta data for an endpoint called ideaStatusCount.

```
<endpoint version="1.0.0" key="ideaStatusCount" feature="sandbox.myplugin">
  <model/>
  <view type="freemarker" contenttype="text/html" macro="false"/>
  <controller id="basic" path="/ideaStatusCount"/>
</endpoint>
```
endpoint parameters:
* `version` - always "1.0.0"
* `key` - the name of the endpoint, without the `.endpoint.xml` extension
* `feature` - must match the fully-qualified name of the studio plugin, without the phase
view parameters
* `type` - always "freemarker"
* `content/type` - the content type of the response. This corresponds to the types listed in the **View Content Type**
drop down in **Studio > Endpoints**.

* `macro` - deprecated (set to `false`)
controller parameters
* `id` - always "basic"
* `path` - the path to the controller.  Set this to the same as the `key`, but with a leading forward-slash, such as `/ideaStatusCount`

#### Controller example
Here is an example controller `ideaStatusCount.ftl` that contains the ideaStatusCount endpoint FreeMarker logic.
It retrieves a list of idea statuses defined for a community and then returns the count of how many ideas have each status, condensing
the response from two calls into a single response in order to save an additional HTTP request.

```
<#include "objecttojson" />
<#setting url_escaping_charset='ISO-8859-1'>
<#assign query = http.request.parameters.name.get("q", "select status from messages where conversation.style=\"idea\" and depth=0 limit 300") />
<#assign result = rest("2.0","/search?q=" + query?url) />
<@compress>
{
<#if result.status = "success">
  "result": "success",
  <#assign statusKeys = {} />

  <#list result.data.items as message>
    <#if message.status??>
		<#if !statusKeys?keys?seq_contains(message.status.key)>
		  <#assign statusKeys = statusKeys + {message.status.key: 1} />
		<#else>
		  <#assign statusKeys = statusKeys + {message.status.key: (statusKeys[message.status.key] + 1)} />
		</#if>
	</#if>
  </#list>
  "ideaKeys": ${objectToJsonFunction(statusKeys)}
<#else>
"result": "error"
</#if>
}
</@compress>
```

[Back to top](/develop/customize#top)
<hr/>
### Customize the page initialization script <a id="pageInit"></a>
The page initialization script (common.init.ftl) enables you to execute business logic using
FreeMarker early in a request prior to any HTML being rendered. The script runs once each request,
server side, and is often used for redirecting to a different page and reskinning pages in the community.

Read <a href="https://community.lithium.com/t5/Developers-Knowledge-Base/Using-a-FreeMarker-Page-Initialization-Script/ta-p/125767" target="_blank">this article</a> on the Lithium Community for more information about how to use the script.

The page initialization script is called `common.init.ftl`. Place this file in `res/init`.

During your community launch, Lithium's Professional Services technical consultants or a Lithium partner
might have already
customized the script. We recommend downloading the script from the Studio plugin if you see script
content in **Studio > Page Initialization**. We recommending not altering existing script content that might
have been added by Lithium Professional Services or by a Lithium partner.

[Back to top](/develop/customize#top)
___
