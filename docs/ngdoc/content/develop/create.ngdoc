@ngdoc overview
@name Create
@sortOrder 200
@description

# Create <a id="top"></a>
<a href="mailto:documentation@lithium.com?Subject=Developer Documentation Feedback" target="_top">Send feedback about this document</a>

* [Create your plugin](/develop/create#createPlugin)
    * [Generate the upload token](/develop/create#GenerateUploadToken)
    * [Create the plugin project repository](/develop/create#createPluginRepo)
    * [Export the Studio plugin](/develop/create#downloadStudio)
    * [Export the SDK plugin](/develop/create#downloadSdk)
* [Revoke a plugin token](/develop/create#revokeToken)
* [Plugin structure](/develop/create#pluginStructure)


## Create your plugin <a id="createPlugin"></a>

After {@link /develop/getStarted setting up your SDK development environment}:
* [Generate an upload token](/develop/create#GenerateUploadToken)
* [Create the local plugin project repository](/develop/create#createPluginRepo)
* Download the [Studio plugin](/develop/create#downloadStudio), an [SDK plugin](/develop/create#downloadSdk) (if one exists), or just get started [creating new customizations](/customize/customize)
* Learn about the [plugin structure](/develop/create#pluginStructure)

### Generate the upload token<a id="GenerateUploadToken"></a>
The upload token is required for all SDK command line options. To generate the token, you'll need the "Use the SDK" permission in
Community Admin. Alternatively, you can generate this token
later and add it to the plugin configuration
file, `server.conf.json`, manually.

**Note:** Each developer crates a separate upload token using a separate, unique login in Studio to ensure that SDK submissions
that appear in the Studio Versions tab are attributed to the correct developer account.

**1** Sign in to the community.

**2** Go to **Studio > Advanced > SDK** and click **Generate Upload Token**.

(If you can't access Studio, ask the community administrator for permission.)

The token is valid for 30 days. This token is specific to the current user logged in to Studio.

**Note:** Do not share this token. If you post to the Lithium Community for troubleshooting help, be careful not to post you
token in your message.

[Top](/develop/create#top)

---

### Create the plugin project repository<a id="createPluginRepo"></a>

**1**  Move to a directory where you want to create your plugin repository. The plugin
project will be created in this location.

  **Note:** Do not create a project within a directory where `lithium-sdk` is installed.

**2**  Run `li create-project`. The command asks you a few questions.

**3**  Enter the name of your plugin project directory.

This is the root directory for
your plugin. The directory name can contain lower case characters, numbers, and hyphens.
This directory structure should be committed into your source-controlled
repository.

**4**  Enter the URL of your stage environment community instance. Use `https` in the URL. **Note:** If your stage site has IP restriction enabled, you must contact Lithium Support and have your IP whitelisted.

**5**  When asked, "Do you have a plugin token," enter the token value if you have it.

Entering the token at this point puts the token into the plugin configuration file. If you
do not have a token, press **Enter** to continue. You add the token into
the configuration file manually after the `li create-project` script finishes.

**6**  Let the script run to completion. You will see a new directory with the name you
defined earlier. **Tip:** Type `li` to see the full list of SDK commands. We'll talk about them more later.

**7**  (Optional) If you did not enter the token value, generate the token in Studio, open
`server.conf.json` at the top level of your plugin repository, and
add the token for the value of `pluginToken`. 

**8** Continue with [Configure](/develop/configure) to set optional plugin configurations or jump to [Plugin Structure](/develop/create#pluginStructure) to learn more about the plugin directory.

[Top](/develop/create#top)

---

### Export the Studio plugin<a id="downloadStudio"></a>
You can export your community's entire Studio plugin from your stage server to your SDK plugin, or pull specific
plugin points. When doing a partial export, you may specify up to five plugin points at a time. Before you export the Studio plugin, read through the Creating a development strategry section of {@link /learn/workflow Developer Workflow}.

**Note:** Components that use the @override naming convention are not supported by the SDK at this time. If you have
components with @override in their names, they will not be exported to the SDK plugin. Continue to use Studio to create and edit
these components.

**1** Go to your SDK plugin directory.

**2** Enter `li export-studio-plugin` and follow the prompts.

Choose to download the entire Studio plugin from your
stage server or select up to five plugin points to export into your SDK plugin. If you specify plugin points to
export using the `--points` flag, you must also pass the `--force` flag.

```
li export-studio-plugin --points "component", "endpoint", "controller, "macro" --force
```

[Top](/develop/create#top)

Create the plugin project

### Export the SDK plugin<a id="downloadSdk"></a>
If your company has already created an SDK plugin, you can populate your plugin project from the
last SDK plugin uploaded to the stage server. Partial exports of an SDK plugin are not supported at this time.

**1** Go to your SDK plugin directory.

**2** Enter `li export-plugin`.

[Top](/develop/create#top)

## Revoke a plugin token <a id="revokeToken"></a>

Plugin tokens expire after 30 days. If your plugin token expires or becomes compromised,
go to **Studio > Advanced > SDK** and click
**Revoke Token** to generate a new one. Remember to update `server.conf.json`
with the new token value, and communicate with any team members sharing the token.

[Top](/develop/create#top)

## Plugin structure<a id="pluginStructure"></a>

Your plugin project repository contains several sub-directories and files. Customizations go into folders under `res` and `web`. See [Where to put your code](/customize/pluginstructure) to learn about each folder.

 Outside of those directories, the only file you'll use is `server.conf.json`. This
 is the configuration file that contains plugin settings and your plugin upload token. See [Configure](/develop/configure) for discriptions of `server.conf.json` options.

 **Note:** Do not check server.conf.json into your source repository. The plugin token should not be shared. It should remain secret.

<img src="img/pluginStructure.png" width="600px" align="middle"/>

[Top](/develop/create#top)
___
