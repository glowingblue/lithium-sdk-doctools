@ngdoc overview
@name Customization Framework
@sortOrder 200
@description

# Customization framework <a id="arch"></a>
<a href="mailto:documentation@lithium.com?Subject=Developer Documentation Feedback" target="_top">Send feedback about this document</a>

When you start with Lithium Community, you start with our standard out-of-the-box experience.
The look and feel of your community is controlled through your community <a href="http://community.lithium.com/t5/Skins-and-assets/About-skins/ta-p/109067" target="_blank">skin</a>. The content
is displayed using widgets called <a href="http://community.lithium.com/t5/Pages-and-layouts/About-components/ta-p/134343" target="_blank">components</a>
(created with a templating language called <a href="http://freemarker.org/" target="_blank">FreeMarker</a>, <a href="http://community.lithium.com/t5/Custom-Content/About-custom-content/ta-p/108551" target="_blank">custom content</a>,
and <a href="http://community.lithium.com/t5/Components-endpoints-and-the/About-endpoints/ta-p/108971" target="_blank">endpoints</a> to interact with third-party applications and your company website.

Community ships with core pages, layouts, components, text, CSS, SCSS, images, and more. Developers, designers, and
other members of your community team can customize, add, and override our core resources.
There are two ways to create customizations:
* Using the Lithium-Klout SDK
* Using Studio, our customization GUI

Customizations created in either environment are bundled into a _plugin_ and published to the stage server where
you can test them before pushing the plugin to your live production environment. Plugins are deployed
to your production environment using Studio Publish. We will discuss plugins in more detail later.

The illustration below shows the Community technology stack. The stack rests on the Community object model,
which is accessed through our platform and API. Our customers use Studio and the SDK to create
  custom plugins which hold the customizations that are rendered on your deployed community. Settings
  in Community Admin, our administrator tool, determine how core components behave, which quilts and skins are used,
  and much more. Integrations with a corporate website, native mobile apps, or third-party applications
 can interact with the plugin, administration, and API layers of the stack.

  <img src="img/LithiumCommunityTechStackGA.png" width="750" align="middle"/>

The horizontal rectangles in the diagram represent the layers of the Community platform that create
a Lithium community. The blue squares represent the tools we provide for our customers to
 interact with the layers of the stack. Lithium maintains the code for our core resources (components,
 pages, skins, and so on) as well as our tool set (Studio, Community Admin, APIs, and the SDK).
 The purple rectangles (the SDK plugin and integrations) are the pieces of the technology stack
 contributed by customers. Customers are responsible for upgrading
customizations and integration points from release to release.

## The Lithium-Klout software development kit <a id="sdk"></a>

The Lithium-Klout SDK enables developers to create customizations in their preferred IDE
or text editor (e.g. Eclipse, IntelliJ, Sublime) and to submit their customizations to the
stage server directly from the command line.

**Note:** If you have more than one stage environment,
the SDK is only supported on the stage environment that is connected via Studio Publish to your production site.

Our developer environment runs on top of node.js, using for its streaming build system.

## Understanding plugins <a id="plugins"></a>
A plugin is the mechanism for storing and organizing customizations for your community.
Essentially, it is a directory structure containing customization resources. Plugin resources include things
like skins, components, endpoints, text strings, and image assets. They are the building blocks that make your
community unique.

Your community uses a variety of plugin resources. Some control core Lithium Community features and
functionality, others contain customizations created for you by Lithium Services, but most
important to developers, the SDK plugin is for your own use in your local IDE. Ideally, your development team
will have a source-controlled plugin project that you will pull from and commit to. Read {@link /learn/workflow Developer
Workflow} for our recommended developer environment setup and deployment workflow.

Plugin resources can be overridden. This is how you customize core components,
  text strings, skins, and assets on the default Lithium community pages. Plugin resources are read and
  rendered in a specific order. This is why in the technology stack diagram, the Studio plugin
  sits above the SDK plugin -- Studio customizations override SDK customizations. The folder structure is identical
  from one plugin to the next. Resources in
  your SDK plugin will override identically named files for core functionality.
  In turn, further customization done in Studio to those resources override your SDK plugin contributions.

It is very important as a developer to work closely with your community team members who use Studio so that
changes made via the SDK are not inadvertently overridden in Studio. Developers should discuss with their community
team before they begin contributing customizations to the stage server using the SDK to be sure that
Studio users understand how the SDK plugin interacts with Studio. Likewise, developers working together on
customizations should communicate so that they don't accidentally override each others work as they submit their
local plugin customizations to stage.

You can learn more about plugins,
how they interact, and how to override and revert files in
<a href="http://community.lithium.com/t5/Understanding-Studio/About-Studio/ta-p/60320" target="_blank">About Studio</a>.

## SDK tool chain <a id="tool-chain"></a>

The diagram below illustrates the tool chain we use to run our
development environment. From the bottom up:

* <a href="http://nodejs.org/" target="_blank">node.js</a> is the JavaScript runtime environment for the SDK
* <a href="http://gulpjs.com/" target="_blank">gulp.js</a> is a streaming build system and task runner
* The Lithium-Klout SDK provides the structure and mechanism to build your
 community customizations

<img src="img/SDKToolChain.png" width="300px" align="middle"/>


___
