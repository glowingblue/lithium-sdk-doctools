@ngdoc overview
@name Developer Workflow
@sortOrder 300
@description

<h1 class = "title">Developer workflow <a id="top"></a></h1>
<a href="mailto:documentation@lithium.com?Subject=Developer Documentation Feedback" target="_top">Send feedback about this document</a>

The Community Plugin SDK supports a developer-friendly "choose your own IDE" experience
that enables you to develop locally with the tools of your choice, collaborate with your
own team in your own source control system, and test on your stage environment.

* [Developer environment recommendations](/learn/workflow#devEnv)
    * [Setting up the plugin project](/learn/workflow#setup)
    * [Creating a development strategy](/learn/workflow#strategy)
        * [SDK-only strategy](/learn/workflow#sdkOnly)
        * [Studio collaboration strategy](/learn/workflow#studioCollab)
        * [Clearing a plugin from the Stage environment](/learn/workflow#clearPluginFromStage)
        * [Clearing the Studio plugin](/learn/workflow#clearStudioPlugin)
        * [Clearing the SDK plugin](/learn/workflow#clearSdkPlugin)
    * [Continuous integration](/learn/workflow#continuousIntegration)
    * [Non-continuous integration](/learn/workflow#nonCI)
* [Deployment](/learn/workflow#deployment)

    * [Before you Deploy to Stage](/learn/workflow#beforeDeployment)
    * [Deploying to Stage](/learn/workflow#deployToStage)
    * [Reverting to a Previous Plugin](/learn/workflow#revert)
    * [Pushing to Production](/learn/workflow#pushToProd)
    * [Collaborating with Lithium Services](/learn/workflow#collabWithServices)
    * [Pushing to Production](/learn/workflow#collabWorkflow)

# Developer environment recommendations <a id="devEnv"></a>

We recommend that developers commit to a shared repository and be in close communication to ensure
that their customization contributions to not override one another's. Lithium does not provide
a central build solution to combine all customizations from all developers into a single plugin
to deploy to the stage environment. Consider implementing a CI service to build and submit
the SDK plugin from your source control system to the stage
environment. We provide an example using GitHub and Travis CI below.

* [Setting up the plugin project](/learn/workflow#setup)
* [Creating a development strategy](/learn/workflow#strategy)
* [Continuous integration](/learn/workflow#continuousIntegration)
* [Non-continuous integration](/learn/workflow#nonCI)

## Setting up the plugin project <a id="setup"></a>
This diagram illustrates the recommended way to set up an SDK plugin project in a development environment.

<img src="img/SDK_DevEnvSetup.png" width="420 px"/>

In a multi-developer team, members set up their individual SDK development environments using
the instructions in {@link /develop/getStarted Getting Started}, but only _one_ developer generates
the plugin token and executes the instructions to {@link /develop/create create the SDK plugin project} for your community.
This task creates the directory
structure to place under your preferred source control system.

> **Note:** Do not place the SDK configuration file (server.conf.json) located in
the root directory of your plugin project under source control.

After the SDK project is created and placed under source control, other developers
 pull the plugin project to replicate the SDK plugin directory structure on their local machines.

After setup is complete, the team is ready to customize and check in. Read {@link /customize/customize Customize}
to learn about the plugin repository structure.

[Top](/learn/workflow#top)

## Creating a development strategy <a id="strategy"></a>
Create a development strategy with your Community team that includes which customization path you'll use. We recommend using either Studio or the SDK, and using that tool throughout development. Collaboration with Studio users is possible during development, but it requires execellent communication and comes with the risk of Studio users overriding SDK contributions if they do not understand the relationship between the Studio and SDK plugin described in <a href="http://community.lithium.com/t5/Understanding-Studio/About-Studio/ta-p/60320" target="_blank">About Studio</a> and <a href="http://community.lithium.com/t5/Understanding-Studio/More-about-plugins/ta-p/194316/message-revision/194316:3" target="_blank">More about plugins</a>.

If you're a current Lithium customer you'll have customizations in Studio. We provide a script that exports customizations into the SDK. You can export the entire Studio plugin or specific plugin points, such as components, skins, and layouts.

When you export a specific Studio plugin point, you export _all_ files for that plugin point. For example, you export _all_ components, not individual ones. When you submit the SDK plugin, you submit the entire plugin, meaning all files for all plugin points.

[Top](/learn/workflow#top)

### SDK-only strategy <a id="sdkOnly"></a>

If you're brand new to Lithium, and choosing to do all development with the SDK, you can ignore the details about exporting from the Studio plugin. You'll start fresh with the SDK.

Here is an example of the simplest development scenario for moving from Studio to SDK development.

Both plugins (Studio and the SDK) exist on the stage server. You export all customizations from Studio into the SDK, and then clear the Studio plugin. We have a script for this, or you can delete customizations from Studio manually. From this point on, you contribute customizations to stage using an SDK script and no development occurs in Studio.

<img src="img/clearPlugin.png" width="640 px"/>

> **Note:** Staging versions for production, reverting to previous versions, versioning features, and editing the robots exclusion protocol still occurs in Studio.

[Top](/learn/workflow#top)

### Studio collaboration strategy <a id="studioCollab"></a>

In this next scenario, a subset of plugin points are exported. The yellow plugin point remains in the Studio plugin. Let's say the yellow plugin point represents skins. Maybe you have a designer, for example, who is more comfortable adding CSS in Studio than checking in files from the command line. You could leave skins in the Studio plugin, but export components and quilts to the SDK.

<img src="img/clearPluginOverride.png" width="640 px"/>

Developers contribute component and quilt code using the SDK, and the designer contributes through Studio. In this scenario, you want to avoid having any skin files in the SDK plugin.

[Top](/learn/workflow#top)

### Clearing a plugin from the Stage environment <a id="clearPluginFromStage"></a>

We have SDK scripts that clear the Studio plugin and the SDK plugin from the Stage environment. Before you use either script, read through this section to understand how the scripts work and when manually removing items from the Studio or SDK plugin might be a better option. When you clear a plugin, you'll see the change in the Versions tab in Studio. If you clear a plugin by mistake and need to <a href="https://community.lithium.com/t5/Previewing-and-publishing/About-versions-and-reverting/ta-p/109031" target="_blank">revert the action</a>, simply stage a previous version.

<img src="img/revertClearedPlugin.png" width="640 px"/>

[Top](/learn/workflow#top)

### Clearing the Studio plugin <a id="clearStudioPlugin"></a>

The `clear-studio-plugin` script clears _all_ plugin points from Studio. (If you have customizations in Studio, run this script _after_ you have exported the Studio pluign to the SDK.) If you want to move all development to the SDK, you'll use this script. For a more finely controlled experience, you can select specific plugin points to clear using the `--points` flag. For example, this clears all components and skins from Studio. To see a log of every file cleared, add the `--verbose` flag.

`li clear-studio-plugin --points component,skins -- force`

But what if you don't want to clear an entire plugin point? You can export a plugin point and then manually delete files in either Studio or the SDK plugin so that the correct files exist in the correct location.

Let's look at an example. Suppose that you're company is reskinning the community. The community currently uses skins B and C for the mobile and desktop versions of the site. Your designer and community manager want to make small changes in Studio to these skins when needed, so they want these skins to remain in the Studio plugin -- their preferred development tool. Meanwhile the development team created a new skin (A) for the community refresh project, and the team will do their development in the SDK.

We show this collaboration scenario in the image below. Looking at the box on the left, you can see that all skins have been exported to the SDK using `export-studio-plugin --points skin`. At this point, skins A, B, and C exist in two places (Studio and the SDK). The skins in the Studio plugin will override the skins in the SDK plugin. We need to clear skin A from Studio so that when we submit our SDK plugin, we can see and test the SDK version in the stage environment. Alson, since we won't be customizing skins B and C with the SDK, we'll have a cleaner development environment if we clear those skins from the SDK plugin.

<img src="img/clearPluginSkinExample.png" width="640 px"/>

 We've got two options to clear the plugins. We can clear the entire Studio skin plugin point (the middle box) or we can manually delete specific skins from Studio and the SDK (the box on the right). Clearing all skins with the `clear-studio-plugin` script removes all skins from Studio, making them inaccessible to Studio users until we submit the SDK plugin to stage. This doesn't meet our requirements for this collaboration scenario. We want skins B and C to remain in the Studio plugin.

Alternatively, we can manually delete skins B and C from the SDK plugin in the local development environment and manually delete skin A from Studio. This lets each group access and edit the skins they need without risk of override. In addition, we won't receieve validation errors when we submit the SDK plugin warning us that files with the same name exist in Studio.

[Top](/learn/workflow#top)

### Clearing the SDK plugin <a id="clearSdkPlugin"></a>

The `clear-plugin` script removes all SDK contributions from the Stage server. Note that this does _not_ delete the files in your local environment. This script does not support the `--points` flag. It's an all-or-nothing action. This script is not part of the normal development workflow. The script provides a way to clear out files on stage contributed from the SDK plugin, if needed. As a general rule, you won't need to use this script unless instructed to by Lithium Support or Services.

[Top](/learn/workflow#top)

## Continuous integration <a id="continuousIntegration"></a>
The diagrams below illustrate the recommended workflow using a continuous integration
 service. You can find our <a href="https://github.com/lithiumtech/linc-sdk-demo" target="_blank">demo project</a> in GitHub.

<img src="img/MultiSDKDevWorkflow.png" width="640 px"/>

For this continuous integration example, we used GitHub, and then hooked the project into Travis CI using their
guides for <a href="http://docs.travis-ci.com/user/getting-started/" target="_blank">Getting Started</a>
(see the JavaScript with Node.js section) and <a href="http://docs.travis-ci.com/user/customizing-the-build/" target="_blank">Customizing the Build</a>.
We encrypted server.conf.json using the instructions in <a href="http://docs.travis-ci.com/user/encrypting-files/" target="_blank">Encrypting Files</a>.
Whatever source control/CI environment you decide to implement, always encrypt server.conf.json, the plugin configuration file described in {@link /develop/create Create}, to
protect the security of the plugin token.

[Top](/learn/workflow#top)

## Non-continuous integration <a id="nonCI"></a>
This diagram illustrates a simple workflow if you cannot implement continuous integration.

<img src="img/DevWorkflowNoCI.png" width="600 px"/>

[Top](/learn/workflow#top)

# Deployment <a id="deployment"></a>
This section describes steps to deploy your SDK plugin.

  * [Before you Deploy to Stage](/learn/workflow#beforeDeployment)
  * [Deploying to Stage](/learn/workflow#deployToStage)
  * [Reverting to a Previous Plugin](/learn/workflow#revert)
  * [Pushing to Production](/learn/workflow#pushToProd)

## Before you deploy to stage <a id="beforeDeployment"></a>
If you work in a multi-developer customization team, communicate closely with team
members about which files you are working with and when you are going to submit them
to stage. If two developers submit a plugin with conflicting changes, the last plugin
submitted to the server will override earlier versions.

In addition, keep in close contact with Studio users when submitting customizations. Studio users
can see plugin points contributed via the SDK in Studio, and they can
edit the content. For example,
a Studio user can see an SDK-contributed component in the Studio Components tab, and can edit the component code. Conversely,
if you create a customization with the same name as a plugin point that already exists in the Studio plugin, your SDK version will
not override the version that exists in the Studio plugin. When files with the same name exist in both the Studio plugin and
the SDK plugin, the Studio version always wins. Changes made to plugin points in Studio always override the SDK version, even if
the customization originated in the SDK. We have added visual cues and warnings in Studio to alert Studio users when they are
working on a file that was contributed in the SDK and are potentially overriding SDK contributions.

For more information about how plugins interact, read
<a href="https://community.lithium.com/t5/Understanding-Studio/About-Studio/ta-p/60320" target="_blank">About Studio</a> and
<a href="https://community.lithium.com/t5/Understanding-Studio/More-about-plugins/ta-p/194316" target="_blank">More about plugins</a> on the Lithium Community
and {@link /learn/architecture Understanding Plugins} in {@link /learn/architecture Customization Framework}.

[Top](/learn/workflow#top)

## Deploying to stage <a id="deployToStage"></a>
When you deploy the SDK plugin to the stage server, you submit the _entire_ plugin as a whole package.
You do not upload individual plugin points, such as a single component, or a subset of images.

The command `li submit-plugin` deploys the plugin to stage. See
{@link /develop/deploy Deploy} for optional flags to pass on the command for validation
prior to deployment.

If you have not implemented a continuous integration service to build and submit
your SDK plugin to the stage environment automatically, each developer submits his or her local
plugin to the stage server individually. Therefore, in a non-CI development environment
always be sure that you have updated your local plugin with the
latest code from the repository before deploying.

The `li submit-plugin` task bundles the plugin, validates it, and submits it to stage.
After a successful upload, the plugin appears in **Studio > Versions**. Look for
 an entry in the Versions tab that says
"Plugin Checkin."

[Top](/learn/workflow#top)

## Reverting to a Previous Plugin Version <a id="revert"></a>
If needed, you can roll back to the previous plugin version in the Studio Versions tab. Hover over
the version to stage and click the "Stage this version" link.

> **Important:** In the **Versions** tab, you will see both Studio and SDK plugins. When reverting
to a previous SDK plugin, be sure re-stage another SDK plugin version, not a Studio plugin.

[Top](/learn/workflow#top)

## Pushing to production <a id="pushToProd"></a>
Push plugins to production using Studio Publish. If you must roll back your live Community version
to a previous version, you also use Studio Publish. See <a href="https://community.lithium.com/t5/Previewing-and-publishing/Studio-Publish-overview/ta-p/81728" target="_blank">Studio Publish Overview</a>
and <a href="https://community.lithium.com/t5/Previewing-and-publishing/The-Studio-Publish-workflow/ta-p/109037" target="_blank">The Studio Publish Workflow</a>
for details.

[Top](/learn/workflow#top)

# Collaborating with Lithium Services <a id="collabWithServices"></a>
Most Lithium Community customers hire Lithium Services at some point for customization work whether
during launch, redesign, and integration, or for consultation and debugging for a specific issue.

In an SDK environment, regardless of the customization needs, when in-house or partner
development teams works in conjunction or in parallel with Lithium Services, both the in-house/partner
development team and the Services team might need to collaborate on the same source code outside of Studio.
Further, an environment must exist where Services and the in-house/partner team can contribute and
collaborate in a way that prevents overwrites in the SDK plugin and provides the greatest efficiency f
or all developers.

[Top](/learn/workflow#top)

## Collaboration workflow <a id="collabWorkflow"></a>
In this workflow, in-house or partner developers use the Community Plugin SDK for Community
development and Lithium Services are hired to do additional Community customization.
The workflow assumes:

* Lithium Services will need access to the customer’s Community code base
* Additional code changes made by in-house or partner developers are necessary during the
Lithium Services engagement. (For example, Lithium Services is working on new customizations
for a Community redesign, while in-house developers need to make changes to custom code
used on the current Community.)
* Codes changes by either team (in-house/partner and Lithium Services) cannot conflict or interfere with the other team’s development work.

For this scenario:

* If the customer does not already have one, Lithium will create a temporary shared repository
on GitHub. Both teams (in-house/partner and Lithium Services) will work in that repository
and coordinate check-ins and changes. Your development team will transfer the code from
your SDK plugin to the shared repository. (Lithium Services will provide instructions.)
* Lithium Services will create a new plugin project based off of your SDK plugin.
* Lithium Services and in-house/partner developers will sync the Github repository to their local environments. (Lithium Services will provide instructions.)
* Both teams will contribute their customization work in the new shared plugin project on Github and then deploy to stage as needed.

[Top](/learn/workflow#top)

___
