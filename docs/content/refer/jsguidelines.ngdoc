@ngdoc overview
@name JavaScript Guidelines
@sortOrder 100
@description

# JavaScript Guidelines

## code formatting
With the exceptions listed below, we follow the JavaScript code formatting rules contained in the [Idiomatic Style Manifesto](https://github.com/rwldrn/idiomatic.js/#idiomatic-style-manifesto).
Exceptions:
 * Indentation using 2 spaces (no tabs).
 * Single quotes for strings.
 * No padding with spaces inside `( )`, `[ ]`.
 * Function declarations and expressions begin like this: `function (a, b) {` or this: `function c(a, b) {`

## language rules
With the exceptions listed below, we follow the JavaScript Language Rules contained in the [Google's JavaScript Language Rules](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#JavaScript_Language_Rules)
 * Instead of complex inheritance hierarchies, we prefer simple objects.
 * We use prototypical inheritance only when absolutely necessary.
 * We love functions and closures and, whenever possible, prefer them over objects.

## documentation
All documentation should be done using [dgeni](https://github.com/angular/dgeni).

## testing
[Karma](http://karma-runner.github.io) (previously Testacular), should be used for Unit Testing and [Protractor](https://docs.angularjs.org/guide/e2e-testing) for end-to-end (E2E) testing.

## linting
All JavaScript should be linted prior to check-in using:
 * [JSHint](https://github.com/jshint/jshint)
 * [JSCS](https://github.com/jscs-dev/node-jscs)
The base [.jshintrc](https://github.com/lithiumtech/cx-docs/blob/master/.jshintrc) and [.jscs.json](https://github.com/lithiumtech/cx-docs/blob/master/.jscs.json) config files should be used as a starting point. Other libraries might need to add additional properties based on their specific needs.

## editor config
To help apply our best practices to JavaScript files during editing we created an [.editorconfig](https://github.com/lithiumtech/cx-docs/blob/master/.editorconfig) that can be used by a number of different [editors](http://editorconfig.org/).

## building
* Using [gulp.js](http://gulpjs.com/) for building
* Linting all JavaScript files against JSHint and JSCS
* Concatenation and minification of scripts
* Running any unit tests written against a headless WebKit browser (via PhantomJS)
* Using revision filenames or oldernames

## considerations
Use [js-beautify](https://github.com/beautify-web/js-beautify) as a build step

## references
* [Idiomatic JS Style Guide](https://github.com/rwldrn/idiomatic.js/#idiomatic-style-manifesto)
* [Google JavaScript Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#JavaScript_Language_Rules)
* [Angular Contribution Guide](http://docs.angularjs.org/misc/contribute)
* [JS The Right Way](http://jstherightway.com/)
* [JavaScript Style Guides And Beautifiers](http://addyosmani.com/blog/javascript-style-guides-and-beautifiers/)
___
