@ngdoc overview
@name AngularJS Guidelines
@sortOrder 150
@description

# AngularJS Guidelines
## naming
* Directive names use the pattern:
    * `li<Module><Directive>` where Directive is the name of the directive. When possible one word will be used to describe the directive, if more that one word is needed then they will be separated by a hyphen in all lowercase.
    * The `li` and feature namespace would be preserved in the directive name. However, since directives need to be proper JavaScript variables we convert the `.`'s and `-` to camel case.
    * The directive would be used as an element ('E'), not as an attribute ('A').

<strong>Examples</strong>:

```js
angular.module('li.community.directives.kudos', [])
  .directive('liCommunityKudos', function () {
    //...
});

//<li-community-kudos></li-community-kudos>

```
## structure
Modeled after github [comment](https://github.com/yeoman/generator-angular/issues/109#issuecomment-14981953) from joshdmiller:

Example of `li.community` angular module.
```
|-- gulpfile.js
|-- package.json
|-- bower.json
|-- module.conf.json
|-- src/
|   |-- directives/
|   |   |-- kudos
|   |   |   |-- kudos.js //directives
|   |   |   |-- kudos.spec.js // unit tests
|   |   |   |-- kudos.tpl.html // template
|   |   |   |-- kudos.en.json // i18n
|   |   |   |-- kudos.demo.html // demo page
|   |   |   |-- kudos.scss // styles
|   |-- services/
|   |-- filters/
|   |-- module.js
|-- karma.conf.js
|-- .jshintrc
|-- .travis.yml
```
## reusable modules
* Lithium Angular modules would be exposed as reusable components in bower, hosted publicly on github. The bower component name should follow the patter: `angular-li-<module>`
    * Example: `angular-li-community`
* More information on contributing angular modules as bower components:
    * [Writing Reusable AngularJS Components with Bower](http://briantford.com/blog/angular-bower.html)
    * [bower.io](http://bower.io/)

## components
"Component" is the term that Lithium uses to define a reusable UI widget. In Angular these will be created using Directives. For purposes of this document, we will refer to them as components.

Components can take parameters that will often control how the widget displays. Parameters should always have a default value if they are not explicitly defined either by the quilt that uses them or when they are directly used when building other views in your Angular application. The defaults might be hardcoded, derived from a URL path or query parameter, or based on a setting set in the admin.

## parameters
* Parameters should be short and descriptive. One word parameters should favored.
    * Examples: `users`, `messages`, `node`, `size`
* Parameters that are rely on settings as their defaults should use the format defined in the `Settings` section of this document. Parameters that have local overrides with supercede the value of the default from settings.

## text keys
* Component text keys should use the pattern:
   * `<component-name>.text.<text-key>`
   * Example: `li.community.kudos.text.already-given-kudos`

## input validation
* All input names and validation should be based on the REST API for a given object.

## references
* [Angular module structure (proposal)](https://gist.github.com/PascalPrecht/5411171)
* [Specification for reusable AngularJS components](https://github.com/PascalPrecht/angular-component-spec/tree/proposal)
* [Writing Reusable AngularJS Components with Bower](http://briantford.com/blog/angular-bower.html)
* [Proposals to Make Components More Reusable](https://github.com/yeoman/generator-angular/issues/109)
* [ng-boilerplate](https://github.com/joshdmiller/ng-boilerplate)
___
