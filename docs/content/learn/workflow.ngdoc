@ngdoc overview
@name Developer Workflow
@sortOrder 300
@description

# Developer Workflow

The Lithium-Klout SDK supports a developer-friendly "choose your own IDE" experience
that enables you to develop locally with the tools of your choice, collaborate with your
own team in your own source control system, and test on your stage environment.

##Developer environment recommendations

We recommend that developers commit to a shared repository and be in close communication to ensure
that their customization contributions to not override one another's. Lithium does not provide
a central build solution to combine all customizations from all developers into a single plugin
to deploy to the stage environment. We strongly recommend implementing your own source control
system and CI service to build and submit the SDK plugin from your source control system to the stage
environment. We provide an example using GitHub and Travis CI in
<a href="http://community.lithium.com/t5/Current-betas/Example-CI-implementation-with-the-Lithium-Klout-SDK/td-p/197003">this post</a> on the Current Betas
 Forum.

This diagram illustrates how to set up our recommended SDK development environment.

<img src="img/SDK_DevEnvSetup.png" width="420 px"/>

In a multi-developer team, members set up their individual SDK development environments using
the instructions in {@link /develop/getStarted Getting Started}, but select _one_ developer to generate
the plugin token and run through the instructions in {@link /develop/create Create}
to create the SDK plugin project for your community. This task creates the directory
structure that should be put into your preferred source control system. Developers share
the access token in a multi-developer environment.

**Note:** If you implement a CI service to automate submitting your plugin to stage, be sure that
you encrypte the server.conf.json configuration file created when the plugin project is created.

After the SDK project files are created and placed under source control, other developers
should pull the plugin project to replicate the SDK plugin directory structure onto their local machines.

After this is complete, the team is ready to customize and check in. Read {@link /develop/customize Customize}
to learn where to place customizations in the plugin repository.

The diagrams below illustrate the recommended workflow using a continuous integration
 service.

<img src="img/MultiSDKDevWorkflow.png" width="640 px"/>


This diagram illustrates a simple workflow if you cannot implement continuous integation.

<img src="img/DevWorkflowNoCI.png" width="600 px"/>

### Deploying to stage
The command `li submit-plugin` deploys the plugin to the stage environment. See
{@link /develop/deploy Deploy} for optional flags to pass on the command for validation
prior to deployment.


If you have not implemented a continuous integration service to build and submit
your SDK plugin to the stage environment automatically, each developer submits his or her local
plugin to the stage server individually. Therefore, in a non-CI development environment
it is important that the developer has updated his local plugin with the
latest code from the repository before deploying.

If you work in a multi-developer customization team, communicate closely with team
members about which files you are working with and when you are going to submit them
to stage. If two developers submit a plugin with conflicting changes, the last plugin
submitted to the server will override earlier versions.

In addition, customizations made to components, pages, text strings, and assets made in
Studio will override the customizations made to the same items submitted using the SDK.
We have added visual cues and warnings in Studio to alert Studio users when they are
working on a file that was contributed in the SDK and are potentially overriding SDK contributions.

For more information about how plugins interact, read
[About Studio](https://community.lithium.com/t5/Understanding-Studio/About-Studio/ta-p/60320),
[More about plugins](https://community.lithium.com/t5/Understanding-Studio/More-about-plugins/ta-p/194316),
and Understanding Plugins in {@link /learn/architecture Architecture}.

The `li submit-plugin` task bundles the plugin and validates it.
The plugin appears in **Studio > Versions**. After a successful upload, you will see
 an entry in the Versions tab that says
"Plugin Checkin."

If needed you can roll back to the previous plugin version in the Versions tab.

**Important:** In the Versions tab, you will see both Studio and SDK plugins. When reverting
to a previous SDK plguin, be sure re-stage another SDK plguin version, not a Studio plugin.

### Pushing to production
Push plugins to production using Studio Publish. If you must roll back your live Community version
to a previous version, you also use Studio Publish. See [Studio Publish Overview](https://community.lithium.com/t5/Previewing-and-publishing/Studio-Publish-overview/ta-p/81728)
and [The Studio Publish Workflow](https://community.lithium.com/t5/Previewing-and-publishing/The-Studio-Publish-workflow/ta-p/109037)
for details.
___
