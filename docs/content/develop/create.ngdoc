@ngdoc overview
@name Create
@sortOrder 200
@description

# Create

## Create your plugin

After {@link /develop/getStarted setting up your SDK development}, you are ready to
create your local plugin project repository.

**1** Generate a plugin upload token in Studio. Sign in to the community and go to Studio.
(If you can't access Studio, ask the community administrator for permission.) In studio,
go to the **SDK** tab and click **Generate Upload Token**.

<img src="img/plugin-developer.png" width="640px">

The token is required to upload, validate, and update your plugin.
Alternatively, you can generate this token later and add it to the appropriate configuration
file manually. **Note:** Multiple users can share the same token.

**2**  Move to a directory where you want to create your plugin repository. A separate directory
structure will be created in this location.

**3**  Run `li create-project`. The command asks you a few questions.

**4**  Enter the name of your plugin project directory. This is the root directory for
your plugin. There are no naming requirements or restrictions. The plugin project
is created in the
directory from where you run `li create-project`. This directory and sub-directories are the
ones that should be committed into your source-controlled repository for your development
team to pull and commit to.

**5**  Enter the URL of your stage environment community instance.

**6**  When asked, "Do you have a plugin token," enter the token value if you have it.
Entering the token at this point puts the token value into a configuration file. If you
do not have a token, press **Enter** to continue. You will have to enter the token into
the configuration file manually after the create-project script finishes.

**7**  Let the script run to completion. You will see a new directory with the name you
defined earlier. **Tip:** Type `li` to see the full list of SDK commands. We'll talk about
them more later.

**8**  (Optional) If you did not enter the token value, generate the token in Studio
if needed, open `server.conf.json` at the top level of your plugin repository, and
enter the token for the value of `pluginToken`.

##Revoking a plugin token

If your plugin token expires or becomes compromised, go to **Studio > SDK** and click
**Revoke Token**. You can then generate a new one. Remember to update `server.conf.json`
with the new token value, and communicate with any team members who might have been using the
same token.

##Plugin structure and configuration

Your plugin project repository contains several sub-directories and files. Your customizations go in
 the `res` and `web` directories. The only file you'll use is `server.conf.json`. This
 is configuration file contains plugin settings and your plugin upload token.

<img src="img/pluginDir.png" width="380px" align="middle"/>

Let's look at `server.conf.json`.

```
{
  "serverUrl": "http://mystagecommunity.lithium.com",
  "pluginToken": "esdlkf09827-7905-39dks-8e48-9e8lkjf093",
  "pluginUploadProtocol": "https",
  "allowStudioOverrides": false,
  "strictMode": true,
  "dryRun": false
}
```

* `serverUrl` - the url to the stage server hosting your community
* `pluginToke` - the plugin token generated in **Studio > SDK**
* `pluginUploadProtocol` - use "https"
* `allowStudioOverrides` - when true, plugin upload is allowed even if files exist in the
Studio plugin with identical names to files in the SDK plugin. When false,  the `li package-plugin`
and `li submit-plugin` commands won't allow plugin upload if a file in the Studio plugin will
override a file in the SDK plugin. When true, the commands ignore validation errors
that prevent Studio plugin overrides. When true, the Studio plugin version of a file
will be used in the community.

* `strictMode` - when true, FreeMarker syntax failures block plugin upload to the server
when you run `li submit-plugin`. We recommend setting `strictMode` to true to prevent uploading
broken components to stage.

* `dryRun` - when true, `li submit-plugin` validates the plugin on the client side,
uploads the plugin to the server and performs server-side validation, but
does not save the plugin to the server. Generally you will set `dryRun` to false in `server.conf.json`
and instead pass the `dryrun` option with `li submit-plugin`. To learn about what kind of
validation occurs on the plugin, see {@link refer/pluginvalidation Plugin Validation}.

Read {@link /develop/deploy Deploy} to learn more about packaging the plugin for deployment
 to stage. Read {@link /develop/customize Customize} to learn how to contribute customizations
using the SDK.
___
